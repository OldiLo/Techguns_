buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net/' }
		mavenCentral()
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
	}
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


version = "1.12.2-2.1.0"
group = "techguns" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "techguns"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


minecraft {
	// The mappings can be changed at any time, and must be in the following format.
	// snapshot_YYYYMMDD   Snapshot are built nightly.
	// stable_#            Stables are built at the discretion of the MCP team.
	// Use non-default mappings at your own risk. they may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	//mappings channel: 'snapshot', version: '20171003-1.12'
	mappings channel: 'snapshot', version: '20171003-1.12'
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
		}

		server {

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
		}
	}
}

repositories {
	maven {
		url 'https://repo.elytradev.com/'
	}
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "modmaven.k-4u.nl"
	}
	maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
	//ivy { name "com.latmod.mods"; artifactPattern "http://mods.latmod.com/[module]/[revision]/[module]-[revision](-[classifier]).[ext]" }
	maven { 
		name="Latmods"
		url "https://jitpack.io/"
	}
	maven {
		name = "OpenComputers"
		url = "https://maven.cil.li/"
	}
}
dependencies {
	//compile 'elucent:albedo:2.0-SNAPSHOT'
	//deobfCompile 'albedo:albedo:0.1.3:deobf'
	compile 'albedo:albedo:1.12.2:1.1.0'
	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
	compile 'crafttweaker:CraftTweaker2:1.12:4.1.13'
	
	//provided 'chisel:Chisel-MC1.12:0.0.14.18:api'
	//provided 'chisel:Chisel:MC1.12:0.0.14.18'
	
	compile 'the-lost-cities:lostcities:1.12:2.0.12'
	
	//compile 'com.latmod.mods:FTBLib:4.2.5:api'
	compile (fg.deobf ("com.github.FTBTeam:FTB-Library-Legacy:47586e9"))

	// compile against the JEI API but do not include it at runtime
	compile (fg.deobf ("mezz.jei:jei_${mc_version}:${jei_version}:api"))
	// at runtime, use the full JEI jar
	runtime (fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}"))

	compile (fg.deobf("li.cil.oc:OpenComputers:${openComputersVersion}"))
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else except the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}

	rename '(.+_at.cfg)', 'META-INF/$1'
}


jar {
	manifest {
		attributes([
				"Specification-Title": "Techguns",
				'FMLCorePlugin': "techguns.core.TechgunsFMLPlugin",
				'FMLAT': 'techguns_at.cfg',
				'FMLCorePluginContainsFMLMod': "true",
				"Specification-Vendor": "examplemodsareus",
				"Specification-Version": "1", // We are version 1 of ourselves
				"Implementation-Title": project.name,
				"Implementation-Version": "${version}",
				"Implementation-Vendor" :"examplemodsareus",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

jar.finalizedBy('reobfJar')